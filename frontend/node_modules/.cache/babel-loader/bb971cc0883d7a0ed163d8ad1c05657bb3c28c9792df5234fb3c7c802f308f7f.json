{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for authentication\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const authService = {\n  login: async data => {\n    const response = await api.post('/auth/login', data);\n    return response.data;\n  },\n  register: async data => {\n    const response = await api.post('/auth/register', data);\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\nexport const getProjects = async () => {\n  const response = await api.get('/projects');\n  return response.data;\n};\nexport const getProject = async id => {\n  const response = await api.get(`/projects/${id}`);\n  return response.data;\n};\nexport const createProject = async project => {\n  const response = await api.post('/projects', project);\n  return response.data;\n};\nexport const updateProject = async (id, project) => {\n  const response = await api.put(`/projects/${id}`, project);\n  return response.data;\n};\nexport const deleteProject = async id => {\n  await api.delete(`/projects/${id}`);\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authService","login","data","response","post","register","logout","removeItem","getProjects","get","getProject","id","createProject","project","updateProject","put","deleteProject","delete"],"sources":["/home/ubuntu/Shri-Project/AI /project_kt_tutorial/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { LoginRequest, LoginResponse, User } from '../types/auth';\nimport { Project } from '../types/Project';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\n\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Add request interceptor for authentication\napi.interceptors.request.use((config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n});\n\nexport const authService = {\n    login: async (data: LoginRequest): Promise<LoginResponse> => {\n        const response = await api.post<LoginResponse>('/auth/login', data);\n        return response.data;\n    },\n\n    register: async (data: User): Promise<User> => {\n        const response = await api.post<User>('/auth/register', data);\n        return response.data;\n    },\n\n    logout: () => {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n    },\n};\n\nexport const getProjects = async (): Promise<Project[]> => {\n    const response = await api.get('/projects');\n    return response.data;\n};\n\nexport const getProject = async (id: number): Promise<Project> => {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n};\n\nexport const createProject = async (project: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>): Promise<Project> => {\n    const response = await api.post('/projects', project);\n    return response.data;\n};\n\nexport const updateProject = async (id: number, project: Partial<Project>): Promise<Project> => {\n    const response = await api.put(`/projects/${id}`, project);\n    return response.data;\n};\n\nexport const deleteProject = async (id: number): Promise<void> => {\n    await api.delete(`/projects/${id}`);\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,2BAA2B;AAEtF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACrBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;AAEF,OAAO,MAAMK,WAAW,GAAG;EACvBC,KAAK,EAAE,MAAOC,IAAkB,IAA6B;IACzD,MAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAgB,aAAa,EAAEF,IAAI,CAAC;IACnE,OAAOC,QAAQ,CAACD,IAAI;EACxB,CAAC;EAEDG,QAAQ,EAAE,MAAOH,IAAU,IAAoB;IAC3C,MAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAO,gBAAgB,EAAEF,IAAI,CAAC;IAC7D,OAAOC,QAAQ,CAACD,IAAI;EACxB,CAAC;EAEDI,MAAM,EAAEA,CAAA,KAAM;IACVT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;EACnC;AACJ,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAgC;EACvD,MAAML,QAAQ,GAAG,MAAMf,GAAG,CAACqB,GAAG,CAAC,WAAW,CAAC;EAC3C,OAAON,QAAQ,CAACD,IAAI;AACxB,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,MAAOC,EAAU,IAAuB;EAC9D,MAAMR,QAAQ,GAAG,MAAMf,GAAG,CAACqB,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;EACjD,OAAOR,QAAQ,CAACD,IAAI;AACxB,CAAC;AAED,OAAO,MAAMU,aAAa,GAAG,MAAOC,OAAwD,IAAuB;EAC/G,MAAMV,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,WAAW,EAAES,OAAO,CAAC;EACrD,OAAOV,QAAQ,CAACD,IAAI;AACxB,CAAC;AAED,OAAO,MAAMY,aAAa,GAAG,MAAAA,CAAOH,EAAU,EAAEE,OAAyB,KAAuB;EAC5F,MAAMV,QAAQ,GAAG,MAAMf,GAAG,CAAC2B,GAAG,CAAC,aAAaJ,EAAE,EAAE,EAAEE,OAAO,CAAC;EAC1D,OAAOV,QAAQ,CAACD,IAAI;AACxB,CAAC;AAED,OAAO,MAAMc,aAAa,GAAG,MAAOL,EAAU,IAAoB;EAC9D,MAAMvB,GAAG,CAAC6B,MAAM,CAAC,aAAaN,EAAE,EAAE,CAAC;AACvC,CAAC;AAED,eAAevB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}