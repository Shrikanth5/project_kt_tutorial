{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Shri-Project/AI /project_kt_tutorial/frontend/src/components/ProjectList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Table, Button, Card, Tag, Space, Typography } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { getProjects } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title\n} = Typography;\nconst ProjectList = () => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n  const fetchProjects = async () => {\n    try {\n      const data = await getProjects();\n      setProjects(data);\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getStageColor = stage => {\n    const colors = {\n      PLANNING: 'blue',\n      DEVELOPMENT: 'green',\n      TESTING: 'orange',\n      DEPLOYMENT: 'purple',\n      MAINTENANCE: 'cyan',\n      COMPLETED: 'green'\n    };\n    return colors[stage] || 'default';\n  };\n  const columns = [{\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: () => navigate(`/projects/${record.id}`),\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)\n  }, {\n    title: 'Stage',\n    dataIndex: 'stage',\n    key: 'stage',\n    render: stage => /*#__PURE__*/_jsxDEV(Tag, {\n      color: getStageColor(stage),\n      children: stage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)\n  }, {\n    title: 'Overview',\n    dataIndex: 'overview',\n    key: 'overview',\n    ellipsis: true\n  }, {\n    title: 'Actions',\n    key: 'actions',\n    render: (_, record) => /*#__PURE__*/_jsxDEV(Space, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: () => navigate(`/projects/${record.id}`),\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => navigate(`/projects/${record.id}/edit`),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Space, {\n      direction: \"vertical\",\n      style: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Space, {\n        justify: \"space-between\",\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          level: 2,\n          children: \"Projects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: () => navigate('/projects/new'),\n          children: \"Create New Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        dataSource: projects,\n        loading: loading,\n        rowKey: \"id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(ProjectList, \"dUBfLPhKMCFWHdctMc2nPIJRQ1s=\", false, function () {\n  return [useNavigate];\n});\n_c = ProjectList;\nexport default ProjectList;\nvar _c;\n$RefreshReg$(_c, \"ProjectList\");","map":{"version":3,"names":["React","useEffect","useState","Table","Button","Card","Tag","Space","Typography","useNavigate","getProjects","jsxDEV","_jsxDEV","Title","ProjectList","_s","projects","setProjects","loading","setLoading","navigate","fetchProjects","data","error","console","getStageColor","stage","colors","PLANNING","DEVELOPMENT","TESTING","DEPLOYMENT","MAINTENANCE","COMPLETED","columns","title","dataIndex","key","render","text","record","onClick","id","children","fileName","_jsxFileName","lineNumber","columnNumber","color","ellipsis","_","type","direction","style","width","justify","level","dataSource","rowKey","_c","$RefreshReg$"],"sources":["/home/ubuntu/Shri-Project/AI /project_kt_tutorial/frontend/src/components/ProjectList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table, Button, Card, Tag, Space, Typography } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { Project } from '../types/Project';\nimport { getProjects } from '../services/api';\n\nconst { Title } = Typography;\n\nconst ProjectList: React.FC = () => {\n    const [projects, setProjects] = useState<Project[]>([]);\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        fetchProjects();\n    }, []);\n\n    const fetchProjects = async () => {\n        try {\n            const data = await getProjects();\n            setProjects(data);\n        } catch (error) {\n            console.error('Error fetching projects:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const getStageColor = (stage: string) => {\n        const colors: { [key: string]: string } = {\n            PLANNING: 'blue',\n            DEVELOPMENT: 'green',\n            TESTING: 'orange',\n            DEPLOYMENT: 'purple',\n            MAINTENANCE: 'cyan',\n            COMPLETED: 'green'\n        };\n        return colors[stage] || 'default';\n    };\n\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (text: string, record: Project) => (\n                <a onClick={() => navigate(`/projects/${record.id}`)}>{text}</a>\n            ),\n        },\n        {\n            title: 'Stage',\n            dataIndex: 'stage',\n            key: 'stage',\n            render: (stage: string) => (\n                <Tag color={getStageColor(stage)}>{stage}</Tag>\n            ),\n        },\n        {\n            title: 'Overview',\n            dataIndex: 'overview',\n            key: 'overview',\n            ellipsis: true,\n        },\n        {\n            title: 'Actions',\n            key: 'actions',\n            render: (_: any, record: Project) => (\n                <Space>\n                    <Button type=\"primary\" onClick={() => navigate(`/projects/${record.id}`)}>\n                        View Details\n                    </Button>\n                    <Button onClick={() => navigate(`/projects/${record.id}/edit`)}>\n                        Edit\n                    </Button>\n                </Space>\n            ),\n        },\n    ];\n\n    return (\n        <Card>\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n                <Space justify=\"space-between\" style={{ width: '100%' }}>\n                    <Title level={2}>Projects</Title>\n                    <Button type=\"primary\" onClick={() => navigate('/projects/new')}>\n                        Create New Project\n                    </Button>\n                </Space>\n                <Table\n                    columns={columns}\n                    dataSource={projects}\n                    loading={loading}\n                    rowKey=\"id\"\n                />\n            </Space>\n        </Card>\n    );\n};\n\nexport default ProjectList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}